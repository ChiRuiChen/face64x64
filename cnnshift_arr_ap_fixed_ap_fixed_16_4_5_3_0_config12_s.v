// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config12_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_address0,
        data_V_ce0,
        data_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        output_V_q0
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] data_V_address0;
output   data_V_ce0;
input  [15:0] data_V_q0;
output  [8:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [15:0] output_V_d0;
input  [15:0] output_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_ce0;
reg[8:0] output_V_address0;
reg output_V_ce0;
reg output_V_we0;
reg[15:0] output_V_d0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [11:0] linebuffer_V_address0;
reg    linebuffer_V_ce0;
reg    linebuffer_V_we0;
reg   [15:0] linebuffer_V_d0;
wire   [15:0] linebuffer_V_q0;
wire   [5:0] i0_fu_289_p2;
reg   [5:0] i0_reg_883;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln246_fu_283_p2;
wire   [12:0] zext_ln203_79_fu_300_p1;
reg   [12:0] zext_ln203_79_reg_893;
wire    ap_CS_fsm_state3;
wire   [10:0] zext_ln203_80_fu_304_p1;
reg   [10:0] zext_ln203_80_reg_899;
wire   [9:0] zext_ln203_81_fu_308_p1;
reg   [9:0] zext_ln203_81_reg_904;
wire   [8:0] zext_ln203_82_fu_312_p1;
reg   [8:0] zext_ln203_82_reg_909;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln250_fu_331_p2;
wire   [1:0] add_ln255_fu_383_p2;
reg   [1:0] add_ln255_reg_923;
wire   [10:0] add_ln203_77_fu_443_p2;
reg   [10:0] add_ln203_77_reg_933;
wire   [15:0] tmpinput_V_q0;
reg   [15:0] tmp1_V_reg_938;
wire    ap_CS_fsm_state5;
wire   [7:0] zext_ln255_fu_448_p1;
reg   [7:0] zext_ln255_reg_943;
reg   [11:0] linebuffer_V_addr_1_reg_949;
reg   [15:0] tmp_V_reg_954;
wire   [5:0] i2_fu_465_p2;
reg   [5:0] i2_reg_962;
wire    ap_CS_fsm_state6;
wire   [12:0] add_ln203_80_fu_518_p2;
reg   [12:0] add_ln203_80_reg_967;
wire   [0:0] icmp_ln258_fu_459_p2;
wire   [1:0] i1_fu_626_p2;
wire   [1:0] i0_6_fu_642_p2;
reg   [1:0] i0_6_reg_985;
wire    ap_CS_fsm_state8;
wire  signed [8:0] sext_ln192_fu_682_p1;
reg  signed [8:0] sext_ln192_reg_990;
wire   [0:0] icmp_ln188_fu_636_p2;
wire   [8:0] zext_ln192_26_fu_692_p1;
reg   [8:0] zext_ln192_26_reg_995;
wire   [1:0] i1_11_fu_702_p2;
reg   [1:0] i1_11_reg_1003;
wire    ap_CS_fsm_state9;
wire   [8:0] or_ln3_fu_708_p5;
reg   [8:0] or_ln3_reg_1008;
wire   [0:0] icmp_ln190_fu_696_p2;
wire   [9:0] zext_ln192_27_fu_720_p1;
reg   [9:0] zext_ln192_27_reg_1013;
wire   [5:0] i2_12_fu_734_p2;
reg   [5:0] i2_12_reg_1021;
wire    ap_CS_fsm_state10;
wire   [9:0] add_ln192_21_fu_749_p2;
reg   [9:0] add_ln192_21_reg_1026;
wire   [0:0] icmp_ln191_fu_728_p2;
wire   [1:0] i1_12_fu_783_p2;
reg   [1:0] i1_12_reg_1039;
wire    ap_CS_fsm_state12;
wire   [8:0] or_ln_fu_789_p5;
reg   [8:0] or_ln_reg_1044;
wire   [0:0] icmp_ln200_fu_777_p2;
wire   [8:0] sub_ln203_fu_825_p2;
reg   [8:0] sub_ln203_reg_1049;
wire   [5:0] i2_11_fu_841_p2;
reg   [5:0] i2_11_reg_1057;
wire    ap_CS_fsm_state13;
wire   [8:0] add_ln203_3_fu_857_p2;
reg   [8:0] add_ln203_3_reg_1062;
wire   [0:0] icmp_ln202_fu_835_p2;
reg   [7:0] tmpinput_V_address0;
reg    tmpinput_V_ce0;
reg    tmpinput_V_we0;
reg   [15:0] tmpinput_V_d0;
reg   [5:0] i0_0_reg_193;
reg   [1:0] i1_0_reg_205;
reg   [5:0] i2_0_reg_217;
wire    ap_CS_fsm_state7;
reg   [1:0] i0_0_i_reg_228;
reg   [1:0] i1_0_i_reg_239;
reg   [5:0] i2_0_i_reg_250;
wire    ap_CS_fsm_state11;
reg   [1:0] i11_0_i_reg_261;
reg   [5:0] i22_0_i_reg_272;
wire    ap_CS_fsm_state14;
wire   [63:0] zext_ln248_fu_295_p1;
wire   [63:0] zext_ln203_84_fu_326_p1;
wire  signed [63:0] sext_ln252_fu_378_p1;
wire  signed [63:0] sext_ln255_5_fu_432_p1;
wire   [63:0] zext_ln203_85_fu_454_p1;
wire   [63:0] zext_ln203_95_fu_575_p1;
wire  signed [63:0] sext_ln203_52_fu_621_p1;
wire   [63:0] zext_ln203_92_fu_632_p1;
wire   [63:0] zext_ln192_6_fu_764_p1;
wire   [63:0] zext_ln192_fu_772_p1;
wire  signed [63:0] sext_ln203_53_fu_871_p1;
wire   [63:0] zext_ln203_fu_876_p1;
wire   [7:0] zext_ln203_83_fu_316_p1;
wire   [7:0] add_ln203_75_fu_320_p2;
wire   [1:0] xor_ln252_fu_337_p2;
wire   [7:0] tmp_163_fu_343_p3;
wire   [5:0] tmp_164_fu_355_p3;
wire   [8:0] zext_ln252_fu_351_p1;
wire   [8:0] zext_ln252_6_fu_363_p1;
wire   [8:0] sub_ln252_fu_367_p2;
wire   [8:0] add_ln252_fu_373_p2;
wire   [7:0] tmp_165_fu_389_p3;
wire   [5:0] tmp_166_fu_401_p3;
wire   [8:0] zext_ln255_14_fu_397_p1;
wire   [8:0] zext_ln255_15_fu_409_p1;
wire  signed [8:0] sub_ln255_fu_413_p2;
wire  signed [9:0] sext_ln255_4_fu_423_p1;
wire   [9:0] add_ln255_6_fu_427_p2;
wire  signed [10:0] sext_ln255_fu_419_p1;
wire   [10:0] add_ln203_76_fu_437_p2;
wire  signed [11:0] sext_ln203_fu_451_p1;
wire   [6:0] tmp_171_fu_471_p3;
wire   [7:0] zext_ln203_90_fu_479_p1;
wire   [7:0] add_ln203_79_fu_483_p2;
wire   [6:0] trunc_ln203_fu_488_p1;
wire   [11:0] tmp_17_fu_500_p3;
wire   [12:0] p_shl_cast_fu_492_p3;
wire   [12:0] zext_ln203_91_fu_508_p1;
wire   [12:0] sub_ln203_9_fu_512_p2;
wire   [6:0] tmp_174_fu_523_p3;
wire   [7:0] zext_ln203_93_fu_531_p1;
wire   [7:0] add_ln203_81_fu_535_p2;
wire   [6:0] trunc_ln203_3_fu_540_p1;
wire   [11:0] tmp_18_fu_552_p3;
wire   [12:0] p_shl6_cast_fu_544_p3;
wire   [12:0] zext_ln203_94_fu_560_p1;
wire   [12:0] sub_ln203_10_fu_564_p2;
wire   [12:0] add_ln203_82_fu_570_p2;
wire   [1:0] sub_ln265_fu_580_p2;
wire   [7:0] tmp_169_fu_586_p3;
wire   [5:0] tmp_170_fu_598_p3;
wire   [8:0] zext_ln203_88_fu_594_p1;
wire   [8:0] zext_ln203_89_fu_606_p1;
wire   [8:0] sub_ln203_8_fu_610_p2;
wire   [8:0] add_ln203_78_fu_616_p2;
wire   [0:0] trunc_ln192_fu_648_p1;
wire   [6:0] shl_ln_fu_652_p3;
wire   [4:0] shl_ln192_9_fu_664_p3;
wire   [7:0] zext_ln192_24_fu_660_p1;
wire   [7:0] zext_ln192_25_fu_672_p1;
wire  signed [7:0] sub_ln192_fu_676_p2;
wire   [7:0] add_ln192_fu_686_p2;
wire   [8:0] zext_ln191_fu_724_p1;
wire   [8:0] add_ln192_22_fu_740_p2;
wire  signed [9:0] sext_ln192_7_fu_745_p1;
wire   [8:0] add_ln192_23_fu_754_p2;
wire   [8:0] add_ln192_24_fu_759_p2;
wire  signed [31:0] sext_ln192_6_fu_769_p1;
wire   [7:0] tmp_167_fu_801_p3;
wire   [5:0] tmp_168_fu_813_p3;
wire   [8:0] zext_ln203_86_fu_809_p1;
wire   [8:0] zext_ln203_87_fu_821_p1;
wire   [7:0] zext_ln202_fu_831_p1;
wire   [7:0] add_ln203_fu_847_p2;
wire   [8:0] zext_ln203_19_fu_853_p1;
wire   [8:0] zext_ln203_96_fu_862_p1;
wire   [8:0] add_ln203_83_fu_866_p2;
reg   [13:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
end

cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config12_s_linetde #(
    .DataWidth( 16 ),
    .AddressRange( 3264 ),
    .AddressWidth( 12 ))
linebuffer_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuffer_V_address0),
    .ce0(linebuffer_V_ce0),
    .we0(linebuffer_V_we0),
    .d0(linebuffer_V_d0),
    .q0(linebuffer_V_q0)
);

cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config12_s_tmpiudo #(
    .DataWidth( 16 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
tmpinput_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmpinput_V_address0),
    .ce0(tmpinput_V_ce0),
    .we0(tmpinput_V_we0),
    .d0(tmpinput_V_d0),
    .q0(tmpinput_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln246_fu_283_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i0_0_i_reg_228 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln190_fu_696_p2 == 1'd1))) begin
        i0_0_i_reg_228 <= i0_6_reg_985;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i0_0_reg_193 <= 6'd0;
    end else if (((icmp_ln250_fu_331_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i0_0_reg_193 <= i0_reg_883;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln188_fu_636_p2 == 1'd1))) begin
        i11_0_i_reg_261 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln202_fu_835_p2 == 1'd1))) begin
        i11_0_i_reg_261 <= i1_12_reg_1039;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln191_fu_728_p2 == 1'd1))) begin
        i1_0_i_reg_239 <= i1_11_reg_1003;
    end else if (((icmp_ln188_fu_636_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        i1_0_i_reg_239 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln258_fu_459_p2 == 1'd1))) begin
        i1_0_reg_205 <= i1_fu_626_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i1_0_reg_205 <= 2'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i22_0_i_reg_272 <= i2_11_reg_1057;
    end else if (((icmp_ln200_fu_777_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        i22_0_i_reg_272 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln190_fu_696_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        i2_0_i_reg_250 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        i2_0_i_reg_250 <= i2_12_reg_1021;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i2_0_reg_217 <= i2_reg_962;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i2_0_reg_217 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln191_fu_728_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        add_ln192_21_reg_1026 <= add_ln192_21_fu_749_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln202_fu_835_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        add_ln203_3_reg_1062 <= add_ln203_3_fu_857_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln250_fu_331_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln203_77_reg_933 <= add_ln203_77_fu_443_p2;
        add_ln255_reg_923 <= add_ln255_fu_383_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln258_fu_459_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        add_ln203_80_reg_967 <= add_ln203_80_fu_518_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i0_6_reg_985 <= i0_6_fu_642_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i0_reg_883 <= i0_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i1_11_reg_1003 <= i1_11_fu_702_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i1_12_reg_1039 <= i1_12_fu_783_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i2_11_reg_1057 <= i2_11_fu_841_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i2_12_reg_1021 <= i2_12_fu_734_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i2_reg_962 <= i2_fu_465_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        linebuffer_V_addr_1_reg_949 <= zext_ln203_85_fu_454_p1;
        tmp1_V_reg_938 <= tmpinput_V_q0;
        tmp_V_reg_954 <= linebuffer_V_q0;
        zext_ln255_reg_943[1 : 0] <= zext_ln255_fu_448_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln190_fu_696_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        or_ln3_reg_1008[5 : 4] <= or_ln3_fu_708_p5[5 : 4];
or_ln3_reg_1008[8 : 7] <= or_ln3_fu_708_p5[8 : 7];
        zext_ln192_27_reg_1013[5 : 4] <= zext_ln192_27_fu_720_p1[5 : 4];
zext_ln192_27_reg_1013[8 : 7] <= zext_ln192_27_fu_720_p1[8 : 7];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln200_fu_777_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        or_ln_reg_1044[5 : 4] <= or_ln_fu_789_p5[5 : 4];
or_ln_reg_1044[8 : 7] <= or_ln_fu_789_p5[8 : 7];
        sub_ln203_reg_1049[8 : 4] <= sub_ln203_fu_825_p2[8 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln188_fu_636_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        sext_ln192_reg_990[8 : 4] <= sext_ln192_fu_682_p1[8 : 4];
        zext_ln192_26_reg_995[7 : 4] <= zext_ln192_26_fu_692_p1[7 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        zext_ln203_79_reg_893[5 : 0] <= zext_ln203_79_fu_300_p1[5 : 0];
        zext_ln203_80_reg_899[5 : 0] <= zext_ln203_80_fu_304_p1[5 : 0];
        zext_ln203_81_reg_904[5 : 0] <= zext_ln203_81_fu_308_p1[5 : 0];
        zext_ln203_82_reg_909[5 : 0] <= zext_ln203_82_fu_312_p1[5 : 0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state12) & (icmp_ln200_fu_777_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln200_fu_777_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_V_ce0 = 1'b1;
    end else begin
        data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        linebuffer_V_address0 = zext_ln203_92_fu_632_p1;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln258_fu_459_p2 == 1'd1))) begin
        linebuffer_V_address0 = linebuffer_V_addr_1_reg_949;
    end else if (((icmp_ln258_fu_459_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        linebuffer_V_address0 = zext_ln203_95_fu_575_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        linebuffer_V_address0 = sext_ln255_5_fu_432_p1;
    end else begin
        linebuffer_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state6) & (icmp_ln258_fu_459_p2 == 1'd1)) | ((icmp_ln258_fu_459_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        linebuffer_V_ce0 = 1'b1;
    end else begin
        linebuffer_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        linebuffer_V_d0 = linebuffer_V_q0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln258_fu_459_p2 == 1'd1))) begin
        linebuffer_V_d0 = tmp1_V_reg_938;
    end else begin
        linebuffer_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state6) & (icmp_ln258_fu_459_p2 == 1'd1)))) begin
        linebuffer_V_we0 = 1'b1;
    end else begin
        linebuffer_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        output_V_address0 = zext_ln203_fu_876_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        output_V_address0 = zext_ln192_fu_772_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        output_V_address0 = zext_ln192_6_fu_764_p1;
    end else begin
        output_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        output_V_d0 = tmpinput_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        output_V_d0 = output_V_q0;
    end else begin
        output_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state11))) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmpinput_V_address0 = sext_ln203_53_fu_871_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        tmpinput_V_address0 = sext_ln203_52_fu_621_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tmpinput_V_address0 = sext_ln252_fu_378_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        tmpinput_V_address0 = zext_ln203_84_fu_326_p1;
    end else begin
        tmpinput_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state6))) begin
        tmpinput_V_ce0 = 1'b1;
    end else begin
        tmpinput_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmpinput_V_d0 = tmp_V_reg_954;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        tmpinput_V_d0 = data_V_q0;
    end else begin
        tmpinput_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state6) & (icmp_ln258_fu_459_p2 == 1'd1)))) begin
        tmpinput_V_we0 = 1'b1;
    end else begin
        tmpinput_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln246_fu_283_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln250_fu_331_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln258_fu_459_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln188_fu_636_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln190_fu_696_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln191_fu_728_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln200_fu_777_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln202_fu_835_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln192_21_fu_749_p2 = ($signed(sext_ln192_7_fu_745_p1) + $signed(zext_ln192_27_reg_1013));

assign add_ln192_22_fu_740_p2 = ($signed(sext_ln192_reg_990) + $signed(zext_ln191_fu_724_p1));

assign add_ln192_23_fu_754_p2 = (zext_ln192_26_reg_995 + zext_ln191_fu_724_p1);

assign add_ln192_24_fu_759_p2 = (add_ln192_23_fu_754_p2 + or_ln3_reg_1008);

assign add_ln192_fu_686_p2 = ($signed(8'd48) + $signed(sub_ln192_fu_676_p2));

assign add_ln203_3_fu_857_p2 = (or_ln_reg_1044 + zext_ln203_19_fu_853_p1);

assign add_ln203_75_fu_320_p2 = (zext_ln203_83_fu_316_p1 + 8'd96);

assign add_ln203_76_fu_437_p2 = ($signed(sext_ln255_fu_419_p1) + $signed(11'd1120));

assign add_ln203_77_fu_443_p2 = (add_ln203_76_fu_437_p2 + zext_ln203_80_reg_899);

assign add_ln203_78_fu_616_p2 = (sub_ln203_8_fu_610_p2 + zext_ln203_82_reg_909);

assign add_ln203_79_fu_483_p2 = (zext_ln255_reg_943 + zext_ln203_90_fu_479_p1);

assign add_ln203_80_fu_518_p2 = (zext_ln203_79_reg_893 + sub_ln203_9_fu_512_p2);

assign add_ln203_81_fu_535_p2 = (zext_ln255_reg_943 + zext_ln203_93_fu_531_p1);

assign add_ln203_82_fu_570_p2 = (zext_ln203_79_reg_893 + sub_ln203_10_fu_564_p2);

assign add_ln203_83_fu_866_p2 = (sub_ln203_reg_1049 + zext_ln203_96_fu_862_p1);

assign add_ln203_fu_847_p2 = (zext_ln202_fu_831_p1 + 8'd96);

assign add_ln252_fu_373_p2 = (sub_ln252_fu_367_p2 + zext_ln203_82_reg_909);

assign add_ln255_6_fu_427_p2 = ($signed(sext_ln255_4_fu_423_p1) + $signed(zext_ln203_81_reg_904));

assign add_ln255_fu_383_p2 = ($signed(i1_0_reg_205) + $signed(2'd3));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign data_V_address0 = zext_ln248_fu_295_p1;

assign i0_6_fu_642_p2 = (i0_0_i_reg_228 + 2'd1);

assign i0_fu_289_p2 = (i0_0_reg_193 + 6'd1);

assign i1_11_fu_702_p2 = (i1_0_i_reg_239 + 2'd1);

assign i1_12_fu_783_p2 = (i11_0_i_reg_261 + 2'd1);

assign i1_fu_626_p2 = (i1_0_reg_205 + 2'd1);

assign i2_11_fu_841_p2 = (i22_0_i_reg_272 + 6'd1);

assign i2_12_fu_734_p2 = (i2_0_i_reg_250 + 6'd1);

assign i2_fu_465_p2 = (i2_0_reg_217 + 6'd1);

assign icmp_ln188_fu_636_p2 = ((i0_0_i_reg_228 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln190_fu_696_p2 = ((i1_0_i_reg_239 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln191_fu_728_p2 = ((i2_0_i_reg_250 == 6'd48) ? 1'b1 : 1'b0);

assign icmp_ln200_fu_777_p2 = ((i11_0_i_reg_261 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln202_fu_835_p2 = ((i22_0_i_reg_272 == 6'd48) ? 1'b1 : 1'b0);

assign icmp_ln246_fu_283_p2 = ((i0_0_reg_193 == 6'd48) ? 1'b1 : 1'b0);

assign icmp_ln250_fu_331_p2 = ((i1_0_reg_205 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln258_fu_459_p2 = ((i2_0_reg_217 == 6'd33) ? 1'b1 : 1'b0);

assign or_ln3_fu_708_p5 = {{{{i1_0_i_reg_239}, {1'd0}}, {i1_0_i_reg_239}}, {4'd0}};

assign or_ln_fu_789_p5 = {{{{i11_0_i_reg_261}, {1'd0}}, {i11_0_i_reg_261}}, {4'd0}};

assign p_shl6_cast_fu_544_p3 = {{trunc_ln203_3_fu_540_p1}, {6'd0}};

assign p_shl_cast_fu_492_p3 = {{trunc_ln203_fu_488_p1}, {6'd0}};

assign sext_ln192_6_fu_769_p1 = $signed(add_ln192_21_reg_1026);

assign sext_ln192_7_fu_745_p1 = $signed(add_ln192_22_fu_740_p2);

assign sext_ln192_fu_682_p1 = sub_ln192_fu_676_p2;

assign sext_ln203_52_fu_621_p1 = $signed(add_ln203_78_fu_616_p2);

assign sext_ln203_53_fu_871_p1 = $signed(add_ln203_83_fu_866_p2);

assign sext_ln203_fu_451_p1 = $signed(add_ln203_77_reg_933);

assign sext_ln252_fu_378_p1 = $signed(add_ln252_fu_373_p2);

assign sext_ln255_4_fu_423_p1 = sub_ln255_fu_413_p2;

assign sext_ln255_5_fu_432_p1 = $signed(add_ln255_6_fu_427_p2);

assign sext_ln255_fu_419_p1 = sub_ln255_fu_413_p2;

assign shl_ln192_9_fu_664_p3 = {{trunc_ln192_fu_648_p1}, {4'd0}};

assign shl_ln_fu_652_p3 = {{trunc_ln192_fu_648_p1}, {6'd0}};

assign sub_ln192_fu_676_p2 = (zext_ln192_24_fu_660_p1 - zext_ln192_25_fu_672_p1);

assign sub_ln203_10_fu_564_p2 = (p_shl6_cast_fu_544_p3 - zext_ln203_94_fu_560_p1);

assign sub_ln203_8_fu_610_p2 = (zext_ln203_88_fu_594_p1 - zext_ln203_89_fu_606_p1);

assign sub_ln203_9_fu_512_p2 = (p_shl_cast_fu_492_p3 - zext_ln203_91_fu_508_p1);

assign sub_ln203_fu_825_p2 = (zext_ln203_86_fu_809_p1 - zext_ln203_87_fu_821_p1);

assign sub_ln252_fu_367_p2 = (zext_ln252_fu_351_p1 - zext_ln252_6_fu_363_p1);

assign sub_ln255_fu_413_p2 = (zext_ln255_14_fu_397_p1 - zext_ln255_15_fu_409_p1);

assign sub_ln265_fu_580_p2 = ($signed(2'd2) - $signed(i1_0_reg_205));

assign tmp_163_fu_343_p3 = {{xor_ln252_fu_337_p2}, {6'd0}};

assign tmp_164_fu_355_p3 = {{xor_ln252_fu_337_p2}, {4'd0}};

assign tmp_165_fu_389_p3 = {{add_ln255_fu_383_p2}, {6'd0}};

assign tmp_166_fu_401_p3 = {{add_ln255_fu_383_p2}, {4'd0}};

assign tmp_167_fu_801_p3 = {{i11_0_i_reg_261}, {6'd0}};

assign tmp_168_fu_813_p3 = {{i11_0_i_reg_261}, {4'd0}};

assign tmp_169_fu_586_p3 = {{sub_ln265_fu_580_p2}, {6'd0}};

assign tmp_170_fu_598_p3 = {{sub_ln265_fu_580_p2}, {4'd0}};

assign tmp_171_fu_471_p3 = {{i2_0_reg_217}, {1'd0}};

assign tmp_174_fu_523_p3 = {{i2_fu_465_p2}, {1'd0}};

assign tmp_17_fu_500_p3 = {{add_ln203_79_fu_483_p2}, {4'd0}};

assign tmp_18_fu_552_p3 = {{add_ln203_81_fu_535_p2}, {4'd0}};

assign trunc_ln192_fu_648_p1 = i0_0_i_reg_228[0:0];

assign trunc_ln203_3_fu_540_p1 = add_ln203_81_fu_535_p2[6:0];

assign trunc_ln203_fu_488_p1 = add_ln203_79_fu_483_p2[6:0];

assign xor_ln252_fu_337_p2 = (i1_0_reg_205 ^ 2'd3);

assign zext_ln191_fu_724_p1 = i2_0_i_reg_250;

assign zext_ln192_24_fu_660_p1 = shl_ln_fu_652_p3;

assign zext_ln192_25_fu_672_p1 = shl_ln192_9_fu_664_p3;

assign zext_ln192_26_fu_692_p1 = add_ln192_fu_686_p2;

assign zext_ln192_27_fu_720_p1 = or_ln3_fu_708_p5;

assign zext_ln192_6_fu_764_p1 = add_ln192_24_fu_759_p2;

assign zext_ln192_fu_772_p1 = $unsigned(sext_ln192_6_fu_769_p1);

assign zext_ln202_fu_831_p1 = i22_0_i_reg_272;

assign zext_ln203_19_fu_853_p1 = add_ln203_fu_847_p2;

assign zext_ln203_79_fu_300_p1 = i0_0_reg_193;

assign zext_ln203_80_fu_304_p1 = i0_0_reg_193;

assign zext_ln203_81_fu_308_p1 = i0_0_reg_193;

assign zext_ln203_82_fu_312_p1 = i0_0_reg_193;

assign zext_ln203_83_fu_316_p1 = i0_0_reg_193;

assign zext_ln203_84_fu_326_p1 = add_ln203_75_fu_320_p2;

assign zext_ln203_85_fu_454_p1 = $unsigned(sext_ln203_fu_451_p1);

assign zext_ln203_86_fu_809_p1 = tmp_167_fu_801_p3;

assign zext_ln203_87_fu_821_p1 = tmp_168_fu_813_p3;

assign zext_ln203_88_fu_594_p1 = tmp_169_fu_586_p3;

assign zext_ln203_89_fu_606_p1 = tmp_170_fu_598_p3;

assign zext_ln203_90_fu_479_p1 = tmp_171_fu_471_p3;

assign zext_ln203_91_fu_508_p1 = tmp_17_fu_500_p3;

assign zext_ln203_92_fu_632_p1 = add_ln203_80_reg_967;

assign zext_ln203_93_fu_531_p1 = tmp_174_fu_523_p3;

assign zext_ln203_94_fu_560_p1 = tmp_18_fu_552_p3;

assign zext_ln203_95_fu_575_p1 = add_ln203_82_fu_570_p2;

assign zext_ln203_96_fu_862_p1 = i22_0_i_reg_272;

assign zext_ln203_fu_876_p1 = add_ln203_3_reg_1062;

assign zext_ln248_fu_295_p1 = i0_0_reg_193;

assign zext_ln252_6_fu_363_p1 = tmp_164_fu_355_p3;

assign zext_ln252_fu_351_p1 = tmp_163_fu_343_p3;

assign zext_ln255_14_fu_397_p1 = tmp_165_fu_389_p3;

assign zext_ln255_15_fu_409_p1 = tmp_166_fu_401_p3;

assign zext_ln255_fu_448_p1 = add_ln255_reg_923;

always @ (posedge ap_clk) begin
    zext_ln203_79_reg_893[12:6] <= 7'b0000000;
    zext_ln203_80_reg_899[10:6] <= 5'b00000;
    zext_ln203_81_reg_904[9:6] <= 4'b0000;
    zext_ln203_82_reg_909[8:6] <= 3'b000;
    zext_ln255_reg_943[7:2] <= 6'b000000;
    sext_ln192_reg_990[3:0] <= 4'b0000;
    zext_ln192_26_reg_995[3:0] <= 4'b0000;
    zext_ln192_26_reg_995[8] <= 1'b0;
    or_ln3_reg_1008[3:0] <= 4'b0000;
    or_ln3_reg_1008[6] <= 1'b0;
    zext_ln192_27_reg_1013[3:0] <= 4'b0000;
    zext_ln192_27_reg_1013[6:6] <= 1'b0;
    zext_ln192_27_reg_1013[9] <= 1'b0;
    or_ln_reg_1044[3:0] <= 4'b0000;
    or_ln_reg_1044[6] <= 1'b0;
    sub_ln203_reg_1049[3:0] <= 4'b0000;
end

endmodule //cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config12_s
