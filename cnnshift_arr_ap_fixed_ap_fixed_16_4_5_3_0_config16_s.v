// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config16_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_address0,
        data_V_ce0,
        data_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        output_V_q0
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] data_V_address0;
output   data_V_ce0;
input  [15:0] data_V_q0;
output  [8:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [15:0] output_V_d0;
input  [15:0] output_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_ce0;
reg[8:0] output_V_address0;
reg output_V_ce0;
reg output_V_we0;
reg[15:0] output_V_d0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [10:0] linebuffer_V_9_address0;
reg    linebuffer_V_9_ce0;
reg    linebuffer_V_9_we0;
reg   [15:0] linebuffer_V_9_d0;
wire   [15:0] linebuffer_V_9_q0;
wire   [5:0] i0_fu_293_p2;
reg   [5:0] i0_reg_879;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln246_fu_287_p2;
wire   [11:0] zext_ln203_62_fu_304_p1;
reg   [11:0] zext_ln203_62_reg_889;
wire    ap_CS_fsm_state3;
wire   [9:0] zext_ln203_63_fu_308_p1;
reg   [9:0] zext_ln203_63_reg_895;
wire   [8:0] zext_ln203_64_fu_312_p1;
reg   [8:0] zext_ln203_64_reg_901;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln250_fu_331_p2;
wire   [1:0] add_ln255_fu_383_p2;
reg   [1:0] add_ln255_reg_915;
wire   [9:0] add_ln203_68_fu_439_p2;
reg   [9:0] add_ln203_68_reg_925;
wire   [15:0] tmpinput_V_q0;
reg   [15:0] tmp1_V_reg_930;
wire    ap_CS_fsm_state5;
wire   [6:0] zext_ln255_fu_444_p1;
reg   [6:0] zext_ln255_reg_935;
reg   [10:0] linebuffer_V_9_addr_1_reg_941;
reg   [15:0] tmp_V_reg_946;
wire   [4:0] i2_fu_461_p2;
reg   [4:0] i2_reg_954;
wire    ap_CS_fsm_state6;
wire   [11:0] add_ln203_71_fu_514_p2;
reg   [11:0] add_ln203_71_reg_959;
wire   [0:0] icmp_ln258_fu_455_p2;
wire   [1:0] i1_fu_622_p2;
wire   [1:0] i0_5_fu_638_p2;
reg   [1:0] i0_5_reg_977;
wire    ap_CS_fsm_state8;
wire  signed [8:0] sext_ln192_fu_678_p1;
reg  signed [8:0] sext_ln192_reg_982;
wire   [0:0] icmp_ln188_fu_632_p2;
wire   [8:0] zext_ln192_22_fu_688_p1;
reg   [8:0] zext_ln192_22_reg_987;
wire   [1:0] i1_9_fu_698_p2;
reg   [1:0] i1_9_reg_995;
wire    ap_CS_fsm_state9;
wire   [8:0] or_ln2_fu_704_p5;
reg   [8:0] or_ln2_reg_1000;
wire   [0:0] icmp_ln190_fu_692_p2;
wire   [9:0] zext_ln192_23_fu_716_p1;
reg   [9:0] zext_ln192_23_reg_1005;
wire   [5:0] i2_10_fu_730_p2;
reg   [5:0] i2_10_reg_1013;
wire    ap_CS_fsm_state10;
wire   [9:0] add_ln192_17_fu_745_p2;
reg   [9:0] add_ln192_17_reg_1018;
wire   [0:0] icmp_ln191_fu_724_p2;
wire   [1:0] i1_10_fu_779_p2;
reg   [1:0] i1_10_reg_1031;
wire    ap_CS_fsm_state12;
wire   [8:0] or_ln_fu_785_p5;
reg   [8:0] or_ln_reg_1036;
wire   [0:0] icmp_ln200_fu_773_p2;
wire   [8:0] sub_ln203_fu_821_p2;
reg   [8:0] sub_ln203_reg_1041;
wire   [5:0] i2_9_fu_837_p2;
reg   [5:0] i2_9_reg_1049;
wire    ap_CS_fsm_state13;
wire   [8:0] add_ln203_2_fu_853_p2;
reg   [8:0] add_ln203_2_reg_1054;
wire   [0:0] icmp_ln202_fu_831_p2;
reg   [7:0] tmpinput_V_address0;
reg    tmpinput_V_ce0;
reg    tmpinput_V_we0;
reg   [15:0] tmpinput_V_d0;
reg   [5:0] i0_0_reg_197;
reg   [1:0] i1_0_reg_209;
reg   [4:0] i2_0_reg_221;
wire    ap_CS_fsm_state7;
reg   [1:0] i0_0_i_reg_232;
reg   [1:0] i1_0_i_reg_243;
reg   [5:0] i2_0_i_reg_254;
wire    ap_CS_fsm_state11;
reg   [1:0] i11_0_i_reg_265;
reg   [5:0] i22_0_i_reg_276;
wire    ap_CS_fsm_state14;
wire   [63:0] zext_ln248_fu_299_p1;
wire   [63:0] zext_ln203_66_fu_326_p1;
wire  signed [63:0] sext_ln252_fu_378_p1;
wire  signed [63:0] sext_ln255_3_fu_428_p1;
wire   [63:0] zext_ln203_67_fu_450_p1;
wire   [63:0] zext_ln203_77_fu_571_p1;
wire  signed [63:0] sext_ln203_50_fu_617_p1;
wire   [63:0] zext_ln203_74_fu_628_p1;
wire   [63:0] zext_ln192_5_fu_760_p1;
wire   [63:0] zext_ln192_fu_768_p1;
wire  signed [63:0] sext_ln203_51_fu_867_p1;
wire   [63:0] zext_ln203_fu_872_p1;
wire   [7:0] zext_ln203_65_fu_316_p1;
wire   [7:0] add_ln203_66_fu_320_p2;
wire   [1:0] xor_ln252_fu_337_p2;
wire   [7:0] tmp_147_fu_343_p3;
wire   [5:0] tmp_148_fu_355_p3;
wire   [8:0] zext_ln252_fu_351_p1;
wire   [8:0] zext_ln252_5_fu_363_p1;
wire   [8:0] sub_ln252_fu_367_p2;
wire   [8:0] add_ln252_fu_373_p2;
wire   [7:0] tmp_149_fu_389_p3;
wire   [5:0] tmp_150_fu_401_p3;
wire   [8:0] zext_ln255_12_fu_397_p1;
wire   [8:0] zext_ln255_13_fu_409_p1;
wire   [8:0] sub_ln255_fu_413_p2;
wire  signed [9:0] sext_ln255_fu_419_p1;
wire   [9:0] add_ln255_5_fu_423_p2;
wire   [9:0] add_ln203_67_fu_433_p2;
wire  signed [10:0] sext_ln203_fu_447_p1;
wire   [5:0] tmp_155_fu_467_p3;
wire   [6:0] zext_ln203_72_fu_475_p1;
wire   [6:0] add_ln203_70_fu_479_p2;
wire   [5:0] trunc_ln203_fu_484_p1;
wire   [10:0] tmp_15_fu_496_p3;
wire   [11:0] p_shl_cast_fu_488_p3;
wire   [11:0] zext_ln203_73_fu_504_p1;
wire   [11:0] sub_ln203_6_fu_508_p2;
wire   [5:0] tmp_158_fu_519_p3;
wire   [6:0] zext_ln203_75_fu_527_p1;
wire   [6:0] add_ln203_72_fu_531_p2;
wire   [5:0] trunc_ln203_2_fu_536_p1;
wire   [10:0] tmp_16_fu_548_p3;
wire   [11:0] p_shl3_cast_fu_540_p3;
wire   [11:0] zext_ln203_76_fu_556_p1;
wire   [11:0] sub_ln203_7_fu_560_p2;
wire   [11:0] add_ln203_73_fu_566_p2;
wire   [1:0] sub_ln265_fu_576_p2;
wire   [7:0] tmp_153_fu_582_p3;
wire   [5:0] tmp_154_fu_594_p3;
wire   [8:0] zext_ln203_70_fu_590_p1;
wire   [8:0] zext_ln203_71_fu_602_p1;
wire   [8:0] sub_ln203_5_fu_606_p2;
wire   [8:0] add_ln203_69_fu_612_p2;
wire   [0:0] trunc_ln192_fu_644_p1;
wire   [6:0] shl_ln_fu_648_p3;
wire   [4:0] shl_ln192_7_fu_660_p3;
wire   [7:0] zext_ln192_20_fu_656_p1;
wire   [7:0] zext_ln192_21_fu_668_p1;
wire  signed [7:0] sub_ln192_fu_672_p2;
wire   [7:0] add_ln192_fu_682_p2;
wire   [8:0] zext_ln191_fu_720_p1;
wire   [8:0] add_ln192_18_fu_736_p2;
wire  signed [9:0] sext_ln192_6_fu_741_p1;
wire   [8:0] add_ln192_19_fu_750_p2;
wire   [8:0] add_ln192_20_fu_755_p2;
wire  signed [31:0] sext_ln192_5_fu_765_p1;
wire   [7:0] tmp_151_fu_797_p3;
wire   [5:0] tmp_152_fu_809_p3;
wire   [8:0] zext_ln203_68_fu_805_p1;
wire   [8:0] zext_ln203_69_fu_817_p1;
wire   [7:0] zext_ln202_fu_827_p1;
wire   [7:0] add_ln203_fu_843_p2;
wire   [8:0] zext_ln203_17_fu_849_p1;
wire   [8:0] zext_ln203_78_fu_858_p1;
wire   [8:0] add_ln203_74_fu_862_p2;
reg   [13:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
end

cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config16_s_lineyd2 #(
    .DataWidth( 16 ),
    .AddressRange( 1728 ),
    .AddressWidth( 11 ))
linebuffer_V_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuffer_V_9_address0),
    .ce0(linebuffer_V_9_ce0),
    .we0(linebuffer_V_9_we0),
    .d0(linebuffer_V_9_d0),
    .q0(linebuffer_V_9_q0)
);

cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config12_s_tmpiudo #(
    .DataWidth( 16 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
tmpinput_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmpinput_V_address0),
    .ce0(tmpinput_V_ce0),
    .we0(tmpinput_V_we0),
    .d0(tmpinput_V_d0),
    .q0(tmpinput_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln246_fu_287_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i0_0_i_reg_232 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln190_fu_692_p2 == 1'd1))) begin
        i0_0_i_reg_232 <= i0_5_reg_977;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i0_0_reg_197 <= 6'd0;
    end else if (((icmp_ln250_fu_331_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i0_0_reg_197 <= i0_reg_879;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln188_fu_632_p2 == 1'd1))) begin
        i11_0_i_reg_265 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln202_fu_831_p2 == 1'd1))) begin
        i11_0_i_reg_265 <= i1_10_reg_1031;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln191_fu_724_p2 == 1'd1))) begin
        i1_0_i_reg_243 <= i1_9_reg_995;
    end else if (((icmp_ln188_fu_632_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        i1_0_i_reg_243 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln258_fu_455_p2 == 1'd1))) begin
        i1_0_reg_209 <= i1_fu_622_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i1_0_reg_209 <= 2'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i22_0_i_reg_276 <= i2_9_reg_1049;
    end else if (((icmp_ln200_fu_773_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        i22_0_i_reg_276 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln190_fu_692_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        i2_0_i_reg_254 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        i2_0_i_reg_254 <= i2_10_reg_1013;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i2_0_reg_221 <= i2_reg_954;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i2_0_reg_221 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln191_fu_724_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        add_ln192_17_reg_1018 <= add_ln192_17_fu_745_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln202_fu_831_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        add_ln203_2_reg_1054 <= add_ln203_2_fu_853_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln250_fu_331_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln203_68_reg_925 <= add_ln203_68_fu_439_p2;
        add_ln255_reg_915 <= add_ln255_fu_383_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln258_fu_455_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        add_ln203_71_reg_959 <= add_ln203_71_fu_514_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i0_5_reg_977 <= i0_5_fu_638_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i0_reg_879 <= i0_fu_293_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i1_10_reg_1031 <= i1_10_fu_779_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i1_9_reg_995 <= i1_9_fu_698_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i2_10_reg_1013 <= i2_10_fu_730_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i2_9_reg_1049 <= i2_9_fu_837_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i2_reg_954 <= i2_fu_461_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        linebuffer_V_9_addr_1_reg_941 <= zext_ln203_67_fu_450_p1;
        tmp1_V_reg_930 <= tmpinput_V_q0;
        tmp_V_reg_946 <= linebuffer_V_9_q0;
        zext_ln255_reg_935[1 : 0] <= zext_ln255_fu_444_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln190_fu_692_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        or_ln2_reg_1000[5 : 4] <= or_ln2_fu_704_p5[5 : 4];
or_ln2_reg_1000[8 : 7] <= or_ln2_fu_704_p5[8 : 7];
        zext_ln192_23_reg_1005[5 : 4] <= zext_ln192_23_fu_716_p1[5 : 4];
zext_ln192_23_reg_1005[8 : 7] <= zext_ln192_23_fu_716_p1[8 : 7];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln200_fu_773_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        or_ln_reg_1036[5 : 4] <= or_ln_fu_785_p5[5 : 4];
or_ln_reg_1036[8 : 7] <= or_ln_fu_785_p5[8 : 7];
        sub_ln203_reg_1041[8 : 4] <= sub_ln203_fu_821_p2[8 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln188_fu_632_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        sext_ln192_reg_982[8 : 4] <= sext_ln192_fu_678_p1[8 : 4];
        zext_ln192_22_reg_987[7 : 4] <= zext_ln192_22_fu_688_p1[7 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        zext_ln203_62_reg_889[5 : 0] <= zext_ln203_62_fu_304_p1[5 : 0];
        zext_ln203_63_reg_895[5 : 0] <= zext_ln203_63_fu_308_p1[5 : 0];
        zext_ln203_64_reg_901[5 : 0] <= zext_ln203_64_fu_312_p1[5 : 0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state12) & (icmp_ln200_fu_773_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln200_fu_773_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_V_ce0 = 1'b1;
    end else begin
        data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        linebuffer_V_9_address0 = zext_ln203_74_fu_628_p1;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln258_fu_455_p2 == 1'd1))) begin
        linebuffer_V_9_address0 = linebuffer_V_9_addr_1_reg_941;
    end else if (((icmp_ln258_fu_455_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        linebuffer_V_9_address0 = zext_ln203_77_fu_571_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        linebuffer_V_9_address0 = sext_ln255_3_fu_428_p1;
    end else begin
        linebuffer_V_9_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state6) & (icmp_ln258_fu_455_p2 == 1'd1)) | ((icmp_ln258_fu_455_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        linebuffer_V_9_ce0 = 1'b1;
    end else begin
        linebuffer_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        linebuffer_V_9_d0 = linebuffer_V_9_q0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln258_fu_455_p2 == 1'd1))) begin
        linebuffer_V_9_d0 = tmp1_V_reg_930;
    end else begin
        linebuffer_V_9_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state6) & (icmp_ln258_fu_455_p2 == 1'd1)))) begin
        linebuffer_V_9_we0 = 1'b1;
    end else begin
        linebuffer_V_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        output_V_address0 = zext_ln203_fu_872_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        output_V_address0 = zext_ln192_fu_768_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        output_V_address0 = zext_ln192_5_fu_760_p1;
    end else begin
        output_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        output_V_d0 = tmpinput_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        output_V_d0 = output_V_q0;
    end else begin
        output_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state11))) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmpinput_V_address0 = sext_ln203_51_fu_867_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        tmpinput_V_address0 = sext_ln203_50_fu_617_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tmpinput_V_address0 = sext_ln252_fu_378_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        tmpinput_V_address0 = zext_ln203_66_fu_326_p1;
    end else begin
        tmpinput_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state6))) begin
        tmpinput_V_ce0 = 1'b1;
    end else begin
        tmpinput_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmpinput_V_d0 = tmp_V_reg_946;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        tmpinput_V_d0 = data_V_q0;
    end else begin
        tmpinput_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state6) & (icmp_ln258_fu_455_p2 == 1'd1)))) begin
        tmpinput_V_we0 = 1'b1;
    end else begin
        tmpinput_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln246_fu_287_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln250_fu_331_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln258_fu_455_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln188_fu_632_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln190_fu_692_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln191_fu_724_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln200_fu_773_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln202_fu_831_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln192_17_fu_745_p2 = ($signed(sext_ln192_6_fu_741_p1) + $signed(zext_ln192_23_reg_1005));

assign add_ln192_18_fu_736_p2 = ($signed(sext_ln192_reg_982) + $signed(zext_ln191_fu_720_p1));

assign add_ln192_19_fu_750_p2 = (zext_ln192_22_reg_987 + zext_ln191_fu_720_p1);

assign add_ln192_20_fu_755_p2 = (add_ln192_19_fu_750_p2 + or_ln2_reg_1000);

assign add_ln192_fu_682_p2 = ($signed(8'd48) + $signed(sub_ln192_fu_672_p2));

assign add_ln203_2_fu_853_p2 = (or_ln_reg_1036 + zext_ln203_17_fu_849_p1);

assign add_ln203_66_fu_320_p2 = (zext_ln203_65_fu_316_p1 + 8'd96);

assign add_ln203_67_fu_433_p2 = ($signed(sext_ln255_fu_419_p1) + $signed(10'd608));

assign add_ln203_68_fu_439_p2 = (add_ln203_67_fu_433_p2 + zext_ln203_63_reg_895);

assign add_ln203_69_fu_612_p2 = (sub_ln203_5_fu_606_p2 + zext_ln203_64_reg_901);

assign add_ln203_70_fu_479_p2 = (zext_ln255_reg_935 + zext_ln203_72_fu_475_p1);

assign add_ln203_71_fu_514_p2 = (zext_ln203_62_reg_889 + sub_ln203_6_fu_508_p2);

assign add_ln203_72_fu_531_p2 = (zext_ln255_reg_935 + zext_ln203_75_fu_527_p1);

assign add_ln203_73_fu_566_p2 = (zext_ln203_62_reg_889 + sub_ln203_7_fu_560_p2);

assign add_ln203_74_fu_862_p2 = (sub_ln203_reg_1041 + zext_ln203_78_fu_858_p1);

assign add_ln203_fu_843_p2 = (zext_ln202_fu_827_p1 + 8'd96);

assign add_ln252_fu_373_p2 = (sub_ln252_fu_367_p2 + zext_ln203_64_reg_901);

assign add_ln255_5_fu_423_p2 = ($signed(sext_ln255_fu_419_p1) + $signed(zext_ln203_63_reg_895));

assign add_ln255_fu_383_p2 = ($signed(i1_0_reg_209) + $signed(2'd3));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign data_V_address0 = zext_ln248_fu_299_p1;

assign i0_5_fu_638_p2 = (i0_0_i_reg_232 + 2'd1);

assign i0_fu_293_p2 = (i0_0_reg_197 + 6'd1);

assign i1_10_fu_779_p2 = (i11_0_i_reg_265 + 2'd1);

assign i1_9_fu_698_p2 = (i1_0_i_reg_243 + 2'd1);

assign i1_fu_622_p2 = (i1_0_reg_209 + 2'd1);

assign i2_10_fu_730_p2 = (i2_0_i_reg_254 + 6'd1);

assign i2_9_fu_837_p2 = (i22_0_i_reg_276 + 6'd1);

assign i2_fu_461_p2 = (i2_0_reg_221 + 5'd1);

assign icmp_ln188_fu_632_p2 = ((i0_0_i_reg_232 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln190_fu_692_p2 = ((i1_0_i_reg_243 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln191_fu_724_p2 = ((i2_0_i_reg_254 == 6'd48) ? 1'b1 : 1'b0);

assign icmp_ln200_fu_773_p2 = ((i11_0_i_reg_265 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln202_fu_831_p2 = ((i22_0_i_reg_276 == 6'd48) ? 1'b1 : 1'b0);

assign icmp_ln246_fu_287_p2 = ((i0_0_reg_197 == 6'd48) ? 1'b1 : 1'b0);

assign icmp_ln250_fu_331_p2 = ((i1_0_reg_209 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln258_fu_455_p2 = ((i2_0_reg_221 == 5'd17) ? 1'b1 : 1'b0);

assign or_ln2_fu_704_p5 = {{{{i1_0_i_reg_243}, {1'd0}}, {i1_0_i_reg_243}}, {4'd0}};

assign or_ln_fu_785_p5 = {{{{i11_0_i_reg_265}, {1'd0}}, {i11_0_i_reg_265}}, {4'd0}};

assign p_shl3_cast_fu_540_p3 = {{trunc_ln203_2_fu_536_p1}, {6'd0}};

assign p_shl_cast_fu_488_p3 = {{trunc_ln203_fu_484_p1}, {6'd0}};

assign sext_ln192_5_fu_765_p1 = $signed(add_ln192_17_reg_1018);

assign sext_ln192_6_fu_741_p1 = $signed(add_ln192_18_fu_736_p2);

assign sext_ln192_fu_678_p1 = sub_ln192_fu_672_p2;

assign sext_ln203_50_fu_617_p1 = $signed(add_ln203_69_fu_612_p2);

assign sext_ln203_51_fu_867_p1 = $signed(add_ln203_74_fu_862_p2);

assign sext_ln203_fu_447_p1 = $signed(add_ln203_68_reg_925);

assign sext_ln252_fu_378_p1 = $signed(add_ln252_fu_373_p2);

assign sext_ln255_3_fu_428_p1 = $signed(add_ln255_5_fu_423_p2);

assign sext_ln255_fu_419_p1 = $signed(sub_ln255_fu_413_p2);

assign shl_ln192_7_fu_660_p3 = {{trunc_ln192_fu_644_p1}, {4'd0}};

assign shl_ln_fu_648_p3 = {{trunc_ln192_fu_644_p1}, {6'd0}};

assign sub_ln192_fu_672_p2 = (zext_ln192_20_fu_656_p1 - zext_ln192_21_fu_668_p1);

assign sub_ln203_5_fu_606_p2 = (zext_ln203_70_fu_590_p1 - zext_ln203_71_fu_602_p1);

assign sub_ln203_6_fu_508_p2 = (p_shl_cast_fu_488_p3 - zext_ln203_73_fu_504_p1);

assign sub_ln203_7_fu_560_p2 = (p_shl3_cast_fu_540_p3 - zext_ln203_76_fu_556_p1);

assign sub_ln203_fu_821_p2 = (zext_ln203_68_fu_805_p1 - zext_ln203_69_fu_817_p1);

assign sub_ln252_fu_367_p2 = (zext_ln252_fu_351_p1 - zext_ln252_5_fu_363_p1);

assign sub_ln255_fu_413_p2 = (zext_ln255_12_fu_397_p1 - zext_ln255_13_fu_409_p1);

assign sub_ln265_fu_576_p2 = ($signed(2'd2) - $signed(i1_0_reg_209));

assign tmp_147_fu_343_p3 = {{xor_ln252_fu_337_p2}, {6'd0}};

assign tmp_148_fu_355_p3 = {{xor_ln252_fu_337_p2}, {4'd0}};

assign tmp_149_fu_389_p3 = {{add_ln255_fu_383_p2}, {6'd0}};

assign tmp_150_fu_401_p3 = {{add_ln255_fu_383_p2}, {4'd0}};

assign tmp_151_fu_797_p3 = {{i11_0_i_reg_265}, {6'd0}};

assign tmp_152_fu_809_p3 = {{i11_0_i_reg_265}, {4'd0}};

assign tmp_153_fu_582_p3 = {{sub_ln265_fu_576_p2}, {6'd0}};

assign tmp_154_fu_594_p3 = {{sub_ln265_fu_576_p2}, {4'd0}};

assign tmp_155_fu_467_p3 = {{i2_0_reg_221}, {1'd0}};

assign tmp_158_fu_519_p3 = {{i2_fu_461_p2}, {1'd0}};

assign tmp_15_fu_496_p3 = {{add_ln203_70_fu_479_p2}, {4'd0}};

assign tmp_16_fu_548_p3 = {{add_ln203_72_fu_531_p2}, {4'd0}};

assign trunc_ln192_fu_644_p1 = i0_0_i_reg_232[0:0];

assign trunc_ln203_2_fu_536_p1 = add_ln203_72_fu_531_p2[5:0];

assign trunc_ln203_fu_484_p1 = add_ln203_70_fu_479_p2[5:0];

assign xor_ln252_fu_337_p2 = (i1_0_reg_209 ^ 2'd3);

assign zext_ln191_fu_720_p1 = i2_0_i_reg_254;

assign zext_ln192_20_fu_656_p1 = shl_ln_fu_648_p3;

assign zext_ln192_21_fu_668_p1 = shl_ln192_7_fu_660_p3;

assign zext_ln192_22_fu_688_p1 = add_ln192_fu_682_p2;

assign zext_ln192_23_fu_716_p1 = or_ln2_fu_704_p5;

assign zext_ln192_5_fu_760_p1 = add_ln192_20_fu_755_p2;

assign zext_ln192_fu_768_p1 = $unsigned(sext_ln192_5_fu_765_p1);

assign zext_ln202_fu_827_p1 = i22_0_i_reg_276;

assign zext_ln203_17_fu_849_p1 = add_ln203_fu_843_p2;

assign zext_ln203_62_fu_304_p1 = i0_0_reg_197;

assign zext_ln203_63_fu_308_p1 = i0_0_reg_197;

assign zext_ln203_64_fu_312_p1 = i0_0_reg_197;

assign zext_ln203_65_fu_316_p1 = i0_0_reg_197;

assign zext_ln203_66_fu_326_p1 = add_ln203_66_fu_320_p2;

assign zext_ln203_67_fu_450_p1 = $unsigned(sext_ln203_fu_447_p1);

assign zext_ln203_68_fu_805_p1 = tmp_151_fu_797_p3;

assign zext_ln203_69_fu_817_p1 = tmp_152_fu_809_p3;

assign zext_ln203_70_fu_590_p1 = tmp_153_fu_582_p3;

assign zext_ln203_71_fu_602_p1 = tmp_154_fu_594_p3;

assign zext_ln203_72_fu_475_p1 = tmp_155_fu_467_p3;

assign zext_ln203_73_fu_504_p1 = tmp_15_fu_496_p3;

assign zext_ln203_74_fu_628_p1 = add_ln203_71_reg_959;

assign zext_ln203_75_fu_527_p1 = tmp_158_fu_519_p3;

assign zext_ln203_76_fu_556_p1 = tmp_16_fu_548_p3;

assign zext_ln203_77_fu_571_p1 = add_ln203_73_fu_566_p2;

assign zext_ln203_78_fu_858_p1 = i22_0_i_reg_276;

assign zext_ln203_fu_872_p1 = add_ln203_2_reg_1054;

assign zext_ln248_fu_299_p1 = i0_0_reg_197;

assign zext_ln252_5_fu_363_p1 = tmp_148_fu_355_p3;

assign zext_ln252_fu_351_p1 = tmp_147_fu_343_p3;

assign zext_ln255_12_fu_397_p1 = tmp_149_fu_389_p3;

assign zext_ln255_13_fu_409_p1 = tmp_150_fu_401_p3;

assign zext_ln255_fu_444_p1 = add_ln255_reg_915;

always @ (posedge ap_clk) begin
    zext_ln203_62_reg_889[11:6] <= 6'b000000;
    zext_ln203_63_reg_895[9:6] <= 4'b0000;
    zext_ln203_64_reg_901[8:6] <= 3'b000;
    zext_ln255_reg_935[6:2] <= 5'b00000;
    sext_ln192_reg_982[3:0] <= 4'b0000;
    zext_ln192_22_reg_987[3:0] <= 4'b0000;
    zext_ln192_22_reg_987[8] <= 1'b0;
    or_ln2_reg_1000[3:0] <= 4'b0000;
    or_ln2_reg_1000[6] <= 1'b0;
    zext_ln192_23_reg_1005[3:0] <= 4'b0000;
    zext_ln192_23_reg_1005[6:6] <= 1'b0;
    zext_ln192_23_reg_1005[9] <= 1'b0;
    or_ln_reg_1036[3:0] <= 4'b0000;
    or_ln_reg_1036[6] <= 1'b0;
    sub_ln203_reg_1041[3:0] <= 4'b0000;
end

endmodule //cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config16_s
